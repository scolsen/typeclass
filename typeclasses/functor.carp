;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(definterface fmap (Fn [(Ref (Fn [a] b)) (f a)] (f b)))
(doc fmap
  "Maps a function over the inhabitants of a unary type constructor."
  "Implementations should satisfy the equations:"
  ""
  "```"
  "identity:"
  "  (fmap &id functor) === (id functor)"
  "composition:"
  "  (fmap &(comp inc dec) functor) === (fmap &inc (fmap &dec functor))"
  "```")

(definterface fmap! (Fn [(Ref (Fn [a] a)) (Ref (f a))] Unit))
(doc fmap!
  "Maps a function over the inhabitants of a unary type constructor in-place."
  ""
  ("Unlike `fmap`, the function argument must 'endomorphic'; it must " false)
  "its argument type and return type must be the same."
  "*Note: Implementations of this interface may be unsafe.*")

(doc Functor
  ("The Functor module defines generic functions for manipulating " false)
  "any type that implements `fmap` and optionally `fmap!`")
(defmodule Functor
 (doc replace
   "Replaces the inhabitants of a functor with a constant value `x`.")
 (sig replace (Fn [b (f a)] (f b)))
 (defn replace [x functor]
   (fmap &(const x) functor))

 (doc replace!
   "Replaces the inhabitants of a functor with the value `x` in place.")
 (sig replace! (Fn [a (Ref (f a))] Unit))
 (defn replace! [x functor-ref]
   (fmap! &(the (Fn [a] a) (const x)) functor-ref))

 (doc void
   "Replaces the inhabitant of a functor with Unit.")
 (sig void (Fn [(f a)] (f Unit)))
 (defn void [functor]
   (fmap &(fn [x] ()) functor))
)

